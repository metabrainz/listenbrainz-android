plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id "io.sentry.android.gradle" version "3.4.2"
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def localPropertiesFile = rootProject.file('local.properties')

android {
    namespace 'org.listenbrainz.android'
    compileSdk 33
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }
    defaultConfig {
        applicationId 'org.listenbrainz.android'
        minSdk 21
        targetSdk 33
        versionCode 20
        versionName "1.2.0"

        multiDexEnabled true
        testInstrumentationRunner "org.listenbrainz.android.CustomTestRunner" // "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    buildTypes {
        debug {
            if (localPropertiesFile.exists()) {
                def localProperties = new Properties()
                localProperties.load(new FileInputStream(localPropertiesFile))

                if(localProperties.getProperty('youtubeApiKey') != null && !localProperties.getProperty('youtubeApiKey').isEmpty()){
                    resValue("string", "youtubeApiKey", localProperties['youtubeApiKey'])
                }
                else{
                    resValue("string", "youtubeApiKey", "test")
                }

                if (localProperties.getProperty('spotifyClientId') != null && !localProperties.getProperty('spotifyClientId').isEmpty()){
                    resValue("string", "spotifyClientId", localProperties['spotifyClientId'])
                }
                else{
                    resValue("string", "spotifyClientId", "test")
                }
            }
            else{
                resValue("string", "youtubeApiKey", "test")
                resValue("string", "spotifyClientId", "test")
            }
            resValue("string", "sentryDsn", "")

            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
        release {
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                resValue("string", "youtubeApiKey", keystoreProperties['youtubeApiKey'])
                resValue("string", "spotifyClientId", keystoreProperties['spotifyClientId'])
                resValue("string", "sentryDsn", keystoreProperties['sentryDsn'])

                signingConfig signingConfigs.release
            }
            else{
                resValue("string", "youtubeApiKey", "")
                resValue("string", "spotifyClientId", "")
                resValue("string", "sentryDsn", "")
            }
            minifyEnabled false
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
}

dependencies {
    //AndroidX
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.browser:browser:1.5.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.core:core-splashscreen:1.0.0'
    //implementation 'androidx.datastore:datastore-preferences:1.0.0'

    //Web Service Setup
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11'
    implementation 'androidx.paging:paging-runtime-ktx:3.1.1'

    //Image downloading and Caching library
    implementation 'com.github.bumptech.glide:glide:4.15.0'
    implementation "com.github.bumptech.glide:compose:1.0.0-alpha.1"
    implementation 'io.coil-kt:coil-compose:2.2.2'
    implementation 'com.caverock:androidsvg-aar:1.4'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.0'
    kapt 'com.github.bumptech.glide:compiler:4.15.0'

    //Permissions
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"

    //Fragment Setup For Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.0'

    //Design Setup
    implementation 'com.google.android.material:material:1.9.0-beta01'
    implementation 'com.airbnb.android:lottie:6.0.0'
    implementation 'com.github.akshaaatt:Onboarding:1.0.5'
    implementation 'com.github.akshaaatt:Share-Android:1.0.0'

    //Dagger-Hilt
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")
    implementation group: 'androidx.lifecycle', name: 'lifecycle-viewmodel-ktx', version: '2.6.0'
    kapt("androidx.hilt:hilt-compiler:1.0.0")

    //Jetpack Compose
    implementation "androidx.compose.ui:ui:1.3.3"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.ui:ui-util:1.3.3"
    implementation "androidx.compose.material:material:1.3.1"
    implementation "androidx.compose.material:material-icons-extended:1.3.1"
    implementation 'androidx.compose.material3:material3:1.0.1'
    implementation 'androidx.compose.material3:material3-window-size-class:1.0.1'
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.constraintlayout:constraintlayout-compose:1.0.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.0'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation 'com.airbnb.android:lottie-compose:6.0.0'
    implementation 'androidx.activity:activity-compose:1.6.1'

    // Compose Navigation
    implementation 'androidx.navigation:navigation-compose:2.6.0-alpha07'     // Stable one
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"     // Experimental but has animations

    //Spotify
    implementation files('./lib/spotify-app-remote-release-0.7.2.aar')

    //Test Setup
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.11'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation "androidx.room:room-testing:2.5.0"

    debugImplementation "androidx.test:monitor:1.6.1"       // Solves "class PlatformTestStorageRegistery not found" error for ui tests.
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.arch.core:core-testing:2.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'app.cash.turbine:turbine:0.12.1'
    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'     // Fastlane ScreenGrab

    testImplementation project(path: ':sharedTest')
    androidTestImplementation project(path: ':sharedTest')

    //ViewPager
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"

    //Exoplayer
    api 'com.google.android.exoplayer:exoplayer-core:2.18.4'
    api 'com.google.android.exoplayer:exoplayer-ui:2.18.4'
    api 'com.google.android.exoplayer:extension-mediasession:2.18.4'

    //Room db
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    //Jetpack Compose accompanists (https://github.com/google/accompanist)
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
}